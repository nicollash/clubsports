import React from "react";
import { connect } from "react-redux";
import { History } from "history";
import {
  Loader,
  Button,
  DeletePopupConfrim,
  HeadingLevelTwo,
  PopupAddToLibrary,
} from "components/common";
import {
  deleteAllDivisions,
  getDivisionsTeams,
  getPools,
  savePool,
  saveTeams,
  saveDivisions,
  createDivisions,
  editPool,
  deletePool,
  generatePools,
  generateDivisions,
} from "./logic/actions";
import {
  checkTeamInSchedule,
  deleteTeam,
} from "components/teams/logic/actions";
import { addEntitiesToLibrary } from "components/authorized-page/authorized-page-event/logic/actions";
import Modal from "../common/modal";
import AddPool from "./division/add-pool";
import {
  BindingCbWithOne,
  BindingCbWithTwo,
  BindingCbWithThree,
  BindingAction,
  BindingCbWithFour,
} from "common/models/callback";
import { ITeam, IDivision } from "common/models";
import { IPool } from "common/models";
import Navigation from "./navigation";
import Division from "./division";
import styles from "./styles.module.scss";
import CsvLoader from "components/common/csv-loader";
import { EntryPoints } from "common/enums";
import { IEntity } from "common/types";
import { IAppState } from "reducers/root-reducer.types";
import AutogeneratePoolsPopup from "./division/auto-generate-pools-popup";
import AutogenerateDivisionsPopup from "./division/auto-generate-divisions-popup";

interface IDivisionsAndPoolsProps {
  divisions: IDivision[];
  pools: IPool[];
  teams: ITeam[];
  isLoading: boolean;
  areDetailsLoading: boolean;
  history: History;
  match: any;
  deleteAllDivisions: BindingCbWithThree<IDivision[], IPool[], ITeam[]>;
  getDivisionsTeams: BindingCbWithOne<string>;
  getPools: BindingCbWithOne<string>;
  savePool: BindingCbWithOne<Partial<IPool>>;
  saveTeams: BindingCbWithOne<ITeam[]>;
  saveDivisions: BindingCbWithTwo<Partial<IDivision>[], string>;
  createDivisions: BindingCbWithTwo<
    Partial<IDivision>[],
    (param?: object) => void
  >;
  addEntitiesToLibrary: BindingCbWithTwo<IEntity[], EntryPoints>;
  editPool: BindingCbWithTwo<IPool, IPool[]>;
  deletePool: BindingCbWithTwo<IPool, ITeam[]>;
  checkTeamInSchedule: BindingCbWithTwo<string, string>;
  deleteTeam: BindingAction;
  generatePools: BindingCbWithFour<IDivision[], number, string[], boolean>;
  generateDivisions: BindingCbWithTwo<string, number | number[]>;
  isOpenConfirm: boolean;
  schedulesNames: string[];
  isOpenDeleteConfirm: boolean;
  isLoadingSchedulesAndBracketsNames: boolean;
}

interface IDivisionAndPoolsState {
  isModalOpen: boolean;
  selected: IDivision;
  isSectionsExpand: boolean;
  isCsvLoaderOpen: boolean;
  isLibraryPopupOpen: boolean;
  isDeletePopupOpen: boolean;
  changedTeams: ITeam[];
  isGeneratePools: boolean;
  isOpenAutogeneratePools: boolean;
  isOpenAutogenerateDivisions: boolean;
}

class DivisionsAndPools extends React.Component<
  IDivisionsAndPoolsProps,
  IDivisionAndPoolsState
> {
  eventId = this.props.match.params.eventId;

  constructor(props: IDivisionsAndPoolsProps) {
    super(props);

    this.state = {
      isModalOpen: false,
      selected: this.props.divisions[0],
      isSectionsExpand: false,
      isCsvLoaderOpen: false,
      isLibraryPopupOpen: false,
      isDeletePopupOpen: false,
      changedTeams: this.props.teams,
      isGeneratePools: false,
      isOpenAutogeneratePools: false,
      isOpenAutogenerateDivisions: false,
    };
  }

  componentDidMount() {
    this.props.getDivisionsTeams(this.eventId);
  }

  componentDidUpdate(prevProps: IDivisionsAndPoolsProps) {
    if (prevProps.teams !== this.props.teams) {
      this.setState({
        changedTeams: this.props.teams,
      });
    }
  }

  onAddDivision = () => {
    const path = this.eventId
      ? `/event/divisions-and-pools-add/${this.eventId}`
      : "/event/divisions-and-pools-add";
    this.props.history.push(path);
  };

  onAddPool = (division: IDivision) => {
    this.setState({ isModalOpen: true, selected: division });
  };

  onModalClose = () => {
    this.setState({ isModalOpen: false });
  };

  onCsvLoaderBtn = () => {
    this.setState({ isCsvLoaderOpen: true });
  };

  onCsvLoaderClose = () => {
    this.setState({ isCsvLoaderOpen: false });
  };

  toggleLibraryPopup = () => {
    this.setState(({ isLibraryPopupOpen }) => ({
      isLibraryPopupOpen: !isLibraryPopupOpen,
    }));
  };

  toggleSectionCollapse = () => {
    this.setState({ isSectionsExpand: !this.state.isSectionsExpand });
  };

  handleDeletePopup = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();

    this.onDeletePopupOpen();
  };

  handleDeleteAllTeams = () => {
    const { divisions, pools, teams, deleteAllDivisions } = this.props;
    deleteAllDivisions(divisions, pools, teams);
    this.onDeletePopupClose();
  };

  onDeletePopupClose = () => {
    this.setState({ isDeletePopupOpen: false });
  };

  onDeletePopupOpen = () => {
    this.setState({ isDeletePopupOpen: true });
  };

  onChange = (teams: ITeam[]) => {
    const mappedTeam = this.state.changedTeams.map((team) => {
      const currentTeam = teams.find((it) => it.team_id === team.team_id);
      return currentTeam
        ? {
            ...currentTeam,
            isChange: true,
          }
        : team;
    });
    this.setState({
      changedTeams: mappedTeam,
    });
  };

  onCancel = () => {
    this.setState({
      changedTeams: this.props.teams,
    });
  };

  onSavePools = () => {
    this.props.saveTeams(this.state.changedTeams);
  };

  onAutogeneratePools = () => {
    this.setState({
      isOpenAutogeneratePools: true,
    });
  };

  onOpenAutogenerateDivisions = () => {
    this.setState({
      isOpenAutogenerateDivisions: true,
    });
  };

  onAutogenerateDivisions = (value: number | number[]) => {
    this.props.generateDivisions(this.eventId, value);
    this.onAutogenerateDivisionsPopupClose();
  };

  onAutogeneratePoolsPopupClose = () => {
    this.setState({
      isOpenAutogeneratePools: false,
    });
  };

  onAutogenerateDivisionsPopupClose = () => {
    this.setState({
      isOpenAutogenerateDivisions: false,
    });
  };

  onCreateDivisions = async (
    dataToSave: any,
    importMethod: string,
    onModalClose: (param?: object) => void
  ) => {
    if (importMethod === "replace") {
      const { divisions, pools, teams, deleteAllDivisions } = this.props;
      await deleteAllDivisions(divisions, pools, teams);
    }
    this.props.createDivisions(dataToSave, onModalClose);
  };

  render() {
    const { divisions, pools, teams, isLoading, generatePools } = this.props;
    const {
      isLibraryPopupOpen,
      isDeletePopupOpen,
      changedTeams,
      isOpenAutogeneratePools,
      isOpenAutogenerateDivisions,
    } = this.state;

    return (
      <section className={styles.container}>
        <Navigation
          divisions={divisions}
          onCsvLoaderBtn={this.onCsvLoaderBtn}
          onAddDivision={this.onAddDivision}
          toggleLibraryPopup={this.toggleLibraryPopup}
          onAutogeneratePools={this.onAutogeneratePools}
          onAutogenerateDivisions={this.onOpenAutogenerateDivisions}
        />
        <div className={styles.sectionContainer}>
          <div className={styles.headingContainer}>
            <div className={styles.heading}>
              <HeadingLevelTwo>Divisions &amp; Pools</HeadingLevelTwo>
              <a
                href="https://tourneymaster.s3.amazonaws.com/public/Quickstarts/TourneyMaster+Creating+Division+%26+Pools+Quick+Start+Guide.pdf"
                target="_blank"
                rel="noopener noreferrer"
              >
                Quickstart Guide
              </a>
            </div>
            <div className={styles.buttonContainer}>
              {divisions?.length ? (
                <>
                  <Button
                    label="Delete All"
                    variant="text"
                    color="inherit"
                    onClick={this.handleDeletePopup}
                  />
                  <Button
                    label={
                      this.state.isSectionsExpand
                        ? "Collapse All"
                        : "Expand All"
                    }
                    variant="text"
                    color="secondary"
                    onClick={this.toggleSectionCollapse}
                  />
                </>
              ) : null}
            </div>
          </div>
          {isLoading && <Loader />}
          {divisions.length && !isLoading ? (
            <>
              <ul className={styles.divisionsList}>
                {divisions.map((division) => (
                  <li key={division.division_id}>
                    <Division
                      eventId={this.eventId}
                      division={division}
                      pools={pools.filter(
                        (pool) => pool.division_id === division.division_id
                      )}
                      teams={changedTeams.filter(
                        (team) => team.division_id === division.division_id
                      )}
                      onAddPool={this.onAddPool}
                      getPools={this.props.getPools}
                      areDetailsLoading={this.props.areDetailsLoading}
                      divisions={this.props.divisions}
                      isSectionExpand={this.state.isSectionsExpand}
                      saveTeams={this.onSavePools}
                      editPool={this.props.editPool}
                      deletePool={this.props.deletePool}
                      checkTeamInSchedule={this.props.checkTeamInSchedule}
                      onChange={this.onChange}
                      onCancel={this.onCancel}
                      isOpenConfirm={this.props.isOpenConfirm}
                      schedulesNames={this.props.schedulesNames}
                      isOpenDeleteConfirm={this.props.isOpenDeleteConfirm}
                      isLoadingSchedulesAndBracketsNames={
                        this.props.isLoadingSchedulesAndBracketsNames
                      }
                      deleteTeam={this.props.deleteTeam}
                    />
                  </li>
                ))}
                {this.state.selected && (
                  <Modal
                    isOpen={this.state.isModalOpen}
                    onClose={this.onModalClose}
                  >
                    <AddPool
                      division={this.state.selected}
                      pools={pools.filter(
                        (pool) =>
                          pool.division_id === this.state.selected.division_id
                      )}
                      onClose={this.onModalClose}
                      savePool={this.props.savePool}
                      numOfTeams={
                        teams.filter(
                          (team: ITeam) =>
                            team.division_id === this.state.selected.division_id
                        ).length
                      }
                    />
                  </Modal>
                )}
              </ul>
            </>
          ) : (
            !isLoading && (
              <div className={styles.noFoundWrapper}>
                <span>There are no divisions yet.</span>
              </div>
            )
          )}
        </div>
        <CsvLoader
          isOpen={this.state.isCsvLoaderOpen}
          onClose={this.onCsvLoaderClose}
          type="divisions"
          onCreate={this.onCreateDivisions}
          eventId={this.eventId}
        />
        <PopupAddToLibrary
          entities={divisions}
          entryPoint={EntryPoints.DIVISIONS}
          isOpen={isLibraryPopupOpen}
          onClose={this.toggleLibraryPopup}
          addEntitiesToLibrary={this.props.addEntitiesToLibrary}
        />
        <DeletePopupConfrim
          type={""}
          message={'Type "All Divisions" to delete'}
          deleteTitle={"All Divisions"}
          isOpen={isDeletePopupOpen}
          onClose={this.onDeletePopupClose}
          onDeleteClick={this.handleDeleteAllTeams}
        />
        <AutogeneratePoolsPopup
          pools={pools}
          divisions={divisions}
          isOpen={isOpenAutogeneratePools}
          onClose={this.onAutogeneratePoolsPopupClose}
          onEdit={generatePools}
        />
        <AutogenerateDivisionsPopup
          isOpen={isOpenAutogenerateDivisions}
          onClose={this.onAutogenerateDivisionsPopupClose}
          onAutogenerateDivisions={this.onAutogenerateDivisions}
        />
      </section>
    );
  }
}

const mapStateToProps = ({ teams, divisions }: IAppState) => ({
  divisions: divisions.data,
  pools: divisions.pools,
  teams: divisions.teams,
  isLoading: divisions.isLoading,
  areDetailsLoading: divisions.areDetailsLoading,
  isOpenConfirm: teams.isOpenConfirm,
  schedulesNames: teams.schedulesNames,
  isOpenDeleteConfirm: teams.isOpenDeleteConfirm,
  isLoadingSchedulesAndBracketsNames: teams.isLoadingNames,
});

const mapDispatchToProps = {
  deleteAllDivisions,
  getDivisionsTeams,
  getPools,
  savePool,
  saveTeams,
  saveDivisions,
  createDivisions,
  addEntitiesToLibrary,
  editPool,
  deletePool,
  checkTeamInSchedule,
  deleteTeam,
  generatePools,
  generateDivisions,
};

export default connect(mapStateToProps, mapDispatchToProps)(DivisionsAndPools);
