import React, {useState} from "react";
import { 
    Modal,
    Button,
    HeadingLevelTwo, 
} from "components/common";
import { Slider } from '@material-ui/core';
import { BindingAction, BindingCbWithOne, } from "common/models";
import { ButtonVariant, ButtonColors } from "common/enums";

import styles from "../popup-pool-edit/styles.module.scss";

interface Props {
  isOpen: boolean;
  onClose: BindingAction;
  onAutogenerateDivisions: BindingCbWithOne<number | number[]>;
};

const marks = [
  {
    value: 2000,
    label: '2000',
  },
  {
    value: 2010,
    label: '2010',
  },
  {
    value: 2020,
    label: '2020',
  },
  {
    value: 2030,
    label: '2030',
  },
];

const AutogenerateDivisionsPopup = ({
    isOpen,
    onClose,
    onAutogenerateDivisions,
}: Props) => {

const [dateValue, setDateValue] = useState<number | number[]>([2000, 2030]);

const valuetext = (value: number) => {
  return `${value}`;
};

const onChangeDates = (_e: object, valuenewValue: number | number[]) => {
  setDateValue(valuenewValue);
};

const onSave = () => {
  onAutogenerateDivisions(dateValue);
};

  return (
    <>
      <Modal isOpen={isOpen} onClose={onClose}>
        <section className={styles.section}>
          <div className={styles.titleWrapper}>
            <HeadingLevelTwo>Auto-generate Divisions</HeadingLevelTwo>
          </div>
          <div className={styles.selectDate}>
            <Slider
              min={2000}
              max={2030}
              marks={marks}
              defaultValue={[2000, 2030]}
              aria-labelledby="vertical-slider"
              valueLabelDisplay="on"
              onChange={onChangeDates}
              getAriaValueText={valuetext}
            />
          </div>
          <div className={styles.btnsWrapper}>
            <Button
              label="Cancel"
              color={ButtonColors.SECONDARY}
              variant={ButtonVariant.TEXT}
              onClick={onClose}
            />
            <span className={styles.btnWrapper}>
              <Button
                label="Save"
                color={ButtonColors.PRIMARY}
                variant={ButtonVariant.CONTAINED}
                onClick={onSave}
              />
            </span>
          </div>
        </section>
      </Modal>
    </>
  )
};

export default AutogenerateDivisionsPopup;